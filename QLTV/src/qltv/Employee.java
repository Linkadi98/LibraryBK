/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package qltv;

import java.awt.Desktop;
import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Arrays;
import java.util.Iterator;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.apache.poi.openxml4j.opc.OPCPackage;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.poi.xwpf.usermodel.IBodyElement;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFParagraph;
import org.apache.poi.xwpf.usermodel.XWPFTable;
import org.apache.poi.xwpf.usermodel.XWPFTableCell;
import org.apache.poi.xwpf.usermodel.XWPFTableRow;

/**
 *
 * @author Pham Ngoc Minh
 */
public class Employee extends javax.swing.JPanel {
    public boolean[] inserted = new boolean[100000];
    private String[] columnNames = {"Mã sách", "Tên sách", "Tác giả", "Nhà xuất bản", "Thể loại", "Giá", "Số lượng"};
    private String[][] rows = {{"", "", "", "", "", "", ""}, {"", "", "", "", "", "", ""}, {"", "", "", "", "", "", ""}, {"", "", "", "", "", "", ""}};
    private ListSelectionModel listSelectionModel;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton okButton;
    private javax.swing.JTextField searchBar;
    private int choose = 0;
    /**
     * Creates new form Employee
     */
    public Employee() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        employeeTable = new javax.swing.JTable();
        save = new javax.swing.JButton();
        showData = new javax.swing.JButton();
        clearAll = new javax.swing.JButton();
        insertData = new javax.swing.JButton();
        chooseFile = new javax.swing.JButton();

        setForeground(new java.awt.Color(0, 51, 255));

        employeeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        listSelectionModel = employeeTable.getSelectionModel();
        employeeTable.setAutoCreateRowSorter(true);
        employeeTable.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        listSelectionModel.addListSelectionListener(new SharedListSelectionHandler());
        employeeTable.setModel(new DefaultTableModel(rows, columnNames
        ));
        employeeTable.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent e) {
            }
            @Override
            public void keyPressed(KeyEvent e) {
                if ((e.getKeyCode() == KeyEvent.VK_F) && e.isControlDown()) {
                    Searching();
                }
            }
            @Override
            public void keyReleased(KeyEvent e) {
            }
        });
        employeeTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                employeeTableMouseReleased(evt);
            }
        });
        employeeTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                employeeTableKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(employeeTable);

        save.setBackground(new java.awt.Color(0, 0, 255));
        save.setForeground(new java.awt.Color(51, 51, 51));
        save.setIcon(new javax.swing.ImageIcon(getClass().getResource("/qltv/icons8-microsoft-word-20.png"))); // NOI18N
        save.setText("Xuất file");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        showData.setBackground(new java.awt.Color(0, 0, 255));
        showData.setIcon(new javax.swing.ImageIcon(getClass().getResource("/qltv/icons8-database-export-20.png"))); // NOI18N
        showData.setText("Hiển thị ");
        showData.setToolTipText("");
        showData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showDataActionPerformed(evt);
            }
        });

        clearAll.setBackground(new java.awt.Color(0, 0, 255));
        clearAll.setIcon(new javax.swing.ImageIcon(getClass().getResource("/qltv/icons8-delete-document-20.png"))); // NOI18N
        clearAll.setText("Xoá");
        clearAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearAllActionPerformed(evt);
            }
        });

        insertData.setBackground(new java.awt.Color(0, 0, 255));
        insertData.setIcon(new javax.swing.ImageIcon(getClass().getResource("/qltv/icons8-add-database-20 (1).png"))); // NOI18N
        insertData.setText("Thêm");
        insertData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertDataActionPerformed(evt);
            }
        });

        chooseFile.setBackground(new java.awt.Color(0, 0, 255));
        chooseFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/qltv/icons8-add-file-20.png"))); // NOI18N
        chooseFile.setText("Chọn file ...");
        chooseFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseFileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 805, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(save, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(showData)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clearAll, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(insertData, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(chooseFile)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chooseFile, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 322, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clearAll)
                    .addComponent(insertData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(save, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(showData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void employeeTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_employeeTableMouseReleased
        // TODO add your handling code here:
        employeeTable.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                int r = employeeTable.rowAtPoint(e.getPoint());
                if (r >= 0 && r < employeeTable.getRowCount()) {
                    employeeTable.setRowSelectionAllowed(true);
                } else {
                    employeeTable.clearSelection();
                }

                int[] rowindex = employeeTable.getSelectedRows();
                for (int i = 0; i < rowindex.length; i++) {
                    int j = rowindex[i];
                    if (j < 0) {
                        return;
                    }
                }
                if (e.isPopupTrigger() && e.getComponent() instanceof JTable) {
                    JPopupMenu popup = popUp();
                    popup.show(e.getComponent(), e.getX(), e.getY());
                }
            }
        });
    }//GEN-LAST:event_employeeTableMouseReleased

    private void employeeTableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_employeeTableKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER && employeeTable.getSelectedRow() == employeeTable.getRowCount() - 1) {

            ((DefaultTableModel) employeeTable.getModel()).addRow(new Object[]{null});
        }
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {

            employeeTable.requestFocus();
            employeeTable.changeSelection(employeeTable.getSelectedRow(), 0, false, false);
        }
    }//GEN-LAST:event_employeeTableKeyPressed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        // TODO add your handling code here:
        try {
            FileInputStream fis = new FileInputStream("C:\\Users\\Pham Ngoc Minh\\Desktop\\TestWord.docx");
            XWPFDocument xdoc = new XWPFDocument(OPCPackage.open(fis));
            Iterator bodyElementIterator = xdoc.getBodyElementsIterator();
            while (bodyElementIterator.hasNext()) {
                IBodyElement element = (IBodyElement) bodyElementIterator.next();

                if ("TABLE".equalsIgnoreCase(element.getElementType().name())) {
                    java.util.List<XWPFTable> tableList = element.getBody().getTables();
                    for (XWPFTable table : tableList) {
                        setDefaultTable(table);
                        for (int i = 1; i < table.getRows().size(); i++) {
                            for (int j = 0; j < table.getRow(i).getTableCells().size(); j++) {
                                removeParagraphs(table.getRow(i).getCell(j));
                                XWPFParagraph paragraph = table.getRow(i).getCell(j).addParagraph();
                                paragraph.createRun().setText(employeeTable.getValueAt(i - 1, j).toString());
                            }

                        }
                        addRowData(table, table.getRows().size());
                    }
                }
            }
            OutputStream out = new FileOutputStream("C:\\Users\\Pham Ngoc Minh\\Desktop\\TestWord.docx");
            xdoc.write(out);
            out.close();

        } catch (IOException | InvalidFormatException ex) {
        }
        int dialogResult = JOptionPane.showConfirmDialog(null, "File đã tạo thành công!\nBạn có muốn mở file?");
        if(dialogResult == JOptionPane.YES_OPTION){
            if (Desktop.isDesktopSupported()) {
                try {
                    File myFile = new File("C:\\Users\\Pham Ngoc Minh\\Desktop\\TestWord.docx");
                    Desktop.getDesktop().open(myFile);
                } catch (IOException ex) {
                    // no application registered for PDFs
                }
            }
        }
        else {
        }
    }//GEN-LAST:event_saveActionPerformed
    
    private void setDefaultTable(XWPFTable table) {
        for (int i = 1; i < table.getRows().size(); i++) {
            table.removeRow(1);
        }
    }
    private void addRowData(XWPFTable table, int lastRowPosition) {
        for (int i = lastRowPosition - 1; i < employeeTable.getRowCount(); i++) {
            XWPFTableRow newRow = table.createRow();
            for (int j = 0; j < table.getRow(i).getTableCells().size(); j++) {
                newRow.getCell(j).setText(employeeTable.getValueAt(i, j).toString());
            }
            
        }
    }
    private static void removeParagraphs(XWPFTableCell tableCell) {
        int count = tableCell.getParagraphs().size();
        for (int i = 0; i < count; i++) {
            tableCell.removeParagraph(i);
        }
    }
    private void showDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showDataActionPerformed
        // TODO add your handling code here:
        String[] defaultColumnNames = {"Mã sách", "Tên sách", "Tác giả", "Nhà xuất bản", "Thể loại", "Giá", "Số lượng"};
        String[][] data = {};
        employeeTable.setModel(new DefaultTableModel(data, defaultColumnNames));
        ConnectDB connectDB = new ConnectDB();
        Connection connection = connectDB.getConnect();
        DefaultTableModel tableModel = (DefaultTableModel) employeeTable.getModel();
        String sql = "SELECT * FROM qltv.infor_book";
        PreparedStatement pst;
        int row = 0;
        try {
            pst = connection.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();
            while (rs.next()) {
                tableModel.addRow(new Object[]{rs.getString(1), rs.getString(2),
                    rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7)
                });
                inserted[row] = true;
                row++;
            }
            employeeTable.setModel(tableModel);
        } catch (SQLException ex) {
            Logger.getLogger(BookTab.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_showDataActionPerformed

    private void clearAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearAllActionPerformed
        // TODO add your handling code here:
        String[] defaultColumnNames = {"Mã sách", "Tên sách", "Tác giả", "Nhà xuất bản", "Thể loại", "Giá", "Số lượng"};
        String[][] data = {null, null, null, null, null, null, null, null, null, null, null, null, null};
        employeeTable.setModel(new DefaultTableModel(data, defaultColumnNames));
        setDefaultInsertedRows();
    }//GEN-LAST:event_clearAllActionPerformed

    private void insertDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertDataActionPerformed
        // TODO add your handling code here:
        ConnectDB connectDB = new ConnectDB();
        Connection connection = connectDB.getConnect();

        //        DefaultTableModel tableModel = (DefaultTableModel) employeeTable.getModel();
        int rows = employeeTable.getRowCount();
        for (int row = 0; row < rows; row++) {
            if (!inserted[row] && !isEmptyRow(row)) {
                String sql = "INSERT INTO qltv.infor_book (idBook, Book_name, Author, Publisher, Kind, Cost, Number_books) VALUES (?,?,?,?,?,?,?)";
                try {
                    connection.setAutoCommit(false);
                    PreparedStatement pst = connection.prepareStatement(sql);
                    String idBook = (String) employeeTable.getValueAt(row, 0);
                    String Book_name = (String) employeeTable.getValueAt(row, 1);
                    String Author = (String) employeeTable.getValueAt(row, 2);
                    String Publisher = (String) employeeTable.getValueAt(row, 3);
                    String Kind = (String) employeeTable.getValueAt(row, 4);
                    String Cost = (String) employeeTable.getValueAt(row, 5);
                    String Number_books = (String) employeeTable.getValueAt(row, 6);
                    pst.setString(1, idBook);
                    pst.setString(2, Book_name);
                    pst.setString(3, Author);
                    pst.setString(4, Publisher);
                    pst.setString(5, Kind);
                    pst.setString(6, Cost);
                    pst.setString(7, Number_books);
                    pst.addBatch();
                    pst.executeUpdate();
                    connection.commit();

                } catch (HeadlessException | SQLException ex) {
                    JOptionPane.showMessageDialog(null, ex.getMessage());
                }
                inserted[row] = true;
            }
        }
        JOptionPane.showMessageDialog(null, "Successfully");
    }//GEN-LAST:event_insertDataActionPerformed

    private void chooseFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseFileActionPerformed
        // TODO add your handling code here:
        String path = null;
        JFileChooser fileChooser = new JFileChooser();
        // show ra một bảng chọn file
        int rVal = fileChooser.showOpenDialog(null);
        // nếu nhấn nút ok (tuỳ chọn APPROVE_OPTION)
        if (rVal == JFileChooser.APPROVE_OPTION) {
            String fileName = fileChooser.getSelectedFile().getName();
            String dir = fileChooser.getCurrentDirectory().toString();
            path = dir + "\\" + fileName;
        } // nếu nhấn nút cancel trong bảng
        else if (rVal == JFileChooser.CANCEL_OPTION) {
            return;
        }
        // chỗ này sẽ delete hết các dòng trước khi nhập dữ liệu từ file
        deleteAllRows();
        // vector lưu tên cột
        Vector columns = new Vector();
        try {
            FileInputStream file = new FileInputStream(new File(path));
            // tạo một file excel
            XSSFWorkbook workbook = new XSSFWorkbook(file);
            // tạo một sheet trong excel có số thứ tự là 0
            XSSFSheet sheet = workbook.getSheetAt(0);
            // con trỏ duyệt hàng trong excel
            Iterator<Row> rowIt = sheet.iterator();
            // nếu vẫn còn dòng trong file
            while (rowIt.hasNext()) {
                // tạo một dòng mới
                Row row = rowIt.next();
                // con trỏ trỏ vào các ô trong một dòng
                Iterator<Cell> cellIt = row.cellIterator();
                // nếu là hàng 0
                if (row.getRowNum() == 0) {
                    // add tên các cột vào trong bảng jtable
                    while (cellIt.hasNext()) {
                        Cell cell = cellIt.next();
                        columns.add(cell.getStringCellValue());
                        ((DefaultTableModel) employeeTable.getModel()).setColumnIdentifiers(columns);
                    }
                } else {
                    //vector chứa dữ liệu trong 1 dòng để add vào bảng jtabel
                    Vector<String> rowData = new Vector<String>();
                    // nếu vẫn còn ô tiếp theo
                    while (cellIt.hasNext()) {
                        // lấy cell trong bảng excel
                        Cell cell = cellIt.next();
                        // nếu cell có kiểu dữ liệu là string
                        if (cell.getCellType() == CellType.STRING) {
                            rowData.add(cell.getStringCellValue());
                        } // nếu cell có kiểu dữ liệu là số
                        else if (cell.getCellType() == CellType.NUMERIC) {
                            rowData.add(Double.toString(cell.getNumericCellValue()));
                        }
                    }
                    // add dữ liệu vào trong bảng jtable
                    ((DefaultTableModel) employeeTable.getModel()).addRow(rowData);
                }
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(BookTab.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(BookTab.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_chooseFileActionPerformed
    
    public void employeeTable(JTable employeeTable) {
        employeeTable = employeeTable;
    }
    private void setDefaultInsertedRows() {
        for (int i = 0; i < inserted.length; i++) {
            inserted[i] = false;
        }
    }
    
    public void deleteAllRows() {
        employeeTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{"Mã sách", "Tên sách", "Tác giả", "Nhà xuất bản", "Thể loại", "Giá", "Số lượng"}
        ));
    }
    
    private boolean isInserted(int row) {
        inserted[row] = true;
        return inserted[row];
    }
         

    private void formMouseClicked(java.awt.event.MouseEvent evt) {                                  
        // TODO add your handling code here:
        
    }                                 

    private void formComponentHidden(java.awt.event.ComponentEvent evt) {                                     
        // TODO add your handling code here:
    }                                    
    private JPopupMenu popUp() {
        JPopupMenu popupMenu = new JPopupMenu();
        JMenu deleteMenu = new JMenu("Delete");
        JPopupMenu subPopupMenu = new JPopupMenu();
        JMenuItem deleteFromTb = new JMenuItem("From table");
        JMenuItem deleteFromDb = new JMenuItem("From database");
        JMenu insertMenu = new JMenu("Insert");
        JMenuItem insertAbove = new JMenuItem("Insert Above");
        JMenuItem insertBelow = new JMenuItem("Insert Below");
        JMenuItem update = new JMenuItem("Update");
        deleteFromDb.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                int[] rows = employeeTable.getSelectedRows();
                Arrays.sort(rows);
                for (int i = 0; i < rows.length; i++) {
                    int row = rows[i];
                    ConnectDB connectDB = new ConnectDB();
                    Connection connection = connectDB.getConnect();

                    DefaultTableModel tableModel = (DefaultTableModel) employeeTable.getModel();
                    String sql = "DELETE FROM qltv.infor_book WHERE (idBook = ?)";
                    try {
                        connection.setAutoCommit(false);
                        PreparedStatement pst = connection.prepareStatement(sql);
                        String idBook = (String) tableModel.getValueAt(row, 0);
                        pst.setString(1, idBook);
                        pst.executeUpdate();
                        connection.commit();
                    } catch (HeadlessException | SQLException ex) {
                        JOptionPane.showMessageDialog(null, "Can not delele!\n" + ex.getMessage());
                    }
                    ((DefaultTableModel) employeeTable.getModel()).removeRow(row);
                    for (int j = i + 1; j < rows.length; j++) {
                        rows[j] = rows[j] - 1;
                    }
                }
                JOptionPane.showMessageDialog(null, "Successfully delete");
            }
        });
        deleteFromTb.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {

                int[] rows = employeeTable.getSelectedRows();
                Arrays.sort(rows);

                for (int i = 0; i < rows.length; i++) {
                    int row = rows[i];
                    ((DefaultTableModel) employeeTable.getModel()).removeRow(row);
                    for (int j = i + 1; j < rows.length; j++) {
                        rows[j] = rows[j] - 1;
                    }
                }
            }
        });
        update.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {

                ConnectDB connectDB = new ConnectDB();
                Connection connection = connectDB.getConnect();

                DefaultTableModel tableModel = (DefaultTableModel) employeeTable.getModel();
                int[] rows = employeeTable.getSelectedRows();
                Arrays.sort(rows);
                for (int i = 0; i < rows.length; i++) {
                    int row = rows[i];

                    String temp = (String) tableModel.getValueAt(row, 0);
                    String sql = "UPDATE qltv.infor_book SET idBook = ?, Book_name = ?, Author = ?, Publisher = ?, Kind = ?, Cost = ?, Number_books = ? WHERE (idBook = ?)";
                    try {
                        connection.setAutoCommit(false);
                        PreparedStatement pst = connection.prepareStatement(sql);
                        String idBook = (String) tableModel.getValueAt(row, 0);
                        String Book_name = (String) tableModel.getValueAt(row, 1);
                        String Author = (String) tableModel.getValueAt(row, 2);
                        String Publisher = (String) tableModel.getValueAt(row, 3);
                        String Kind = (String) tableModel.getValueAt(row, 4);
                        String Cost = (String) tableModel.getValueAt(row, 5);
                        String Number_books = (String) tableModel.getValueAt(row, 6);
                        pst.setString(8, temp);
                        pst.setString(1, idBook);
                        pst.setString(2, Book_name);
                        pst.setString(3, Author);
                        pst.setString(4, Publisher);
                        pst.setString(5, Kind);
                        pst.setString(6, Cost);
                        pst.setString(7, Number_books);
                        pst.addBatch();
                        pst.executeUpdate();

                        connection.commit();
                    } catch (HeadlessException | SQLException ex) {
                        JOptionPane.showMessageDialog(null, "Can not update!\n" + ex.getMessage());
                    }
                }
                JOptionPane.showMessageDialog(null, "Successfully update");
            }
        });
        insertAbove.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                ((DefaultTableModel) employeeTable.getModel()).insertRow(employeeTable.getSelectedRow(), new Object[]{null});
                employeeTable.removeRowSelectionInterval(employeeTable.getSelectedRow(), employeeTable.getSelectedRow());
            }
        });
        insertBelow.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                ((DefaultTableModel) employeeTable.getModel()).insertRow(employeeTable.getSelectedRow() + 1, new Object[]{null});
                employeeTable.removeRowSelectionInterval(employeeTable.getSelectedRow() + 1, employeeTable.getSelectedRow() + 1);
            }
        });
        subPopupMenu.add(deleteFromTb);
        subPopupMenu.add(deleteFromDb);
        insertMenu.add(insertBelow);
        insertMenu.add(insertAbove);
        deleteMenu.add(deleteFromTb);
        deleteMenu.add(deleteFromDb);
        popupMenu.add(insertMenu);
        popupMenu.add(deleteMenu);
        popupMenu.add(update);
        return popupMenu;

    }
    
    private boolean isEmptyRow(int row) {
        DefaultTableModel tableModel = (DefaultTableModel) employeeTable.getModel();
        for (int i = 0; i < employeeTable.getColumnCount(); i++) {
            String data = (String) employeeTable.getValueAt(row, i);
            if (data == null) {
                return true;
            }
        }
        return false;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton chooseFile;
    private javax.swing.JButton clearAll;
    private javax.swing.JTable employeeTable;
    private javax.swing.JButton insertData;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton save;
    private javax.swing.JButton showData;
    // End of variables declaration//GEN-END:variables
    class SharedListSelectionHandler implements ListSelectionListener {

        @Override
        public void valueChanged(ListSelectionEvent e) {
        }
    }

    private void Searching() {

        JFrame searchingBox = new JFrame("Tìm kiếm");
        searchingBox.setSize(600, 200);
        jComboBox1 = new javax.swing.JComboBox<>();
        searchBar = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        okButton = new javax.swing.JButton();
        searchingBox.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{"Tìm kiếm theo", "Mã sách", "Tên sách", "Tác giả", "Nhà xuất bản", "Thể loại", "Giá", "Số lượng sách"}));
        jComboBox1.addActionListener((ActionEvent evt) -> {
            JComboBox<String> combo = (JComboBox<String>) evt.getSource();
            String selected = (String) combo.getSelectedItem();
            if (selected != null) {
                switch (selected) {
                    case "Mã sách":
                        choose = 1;
                        break;
                    case "Tên sách":
                        choose = 2;
                        break;
                    case "Tác giả":
                        choose = 3;
                        break;
                    case "Nhà xuất bản":
                        choose = 4;
                        break;
                    case "Thể loại":
                        choose = 5;
                        break;
                    case "Giá":
                        choose = 6;
                        break;
                    default:
                        choose = 7;
                        break;
                }
            }
        });
        searchBar.setToolTipText("Search");

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 14));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Find");
        jLabel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        okButton.setText("OK");
        okButton.addActionListener((ActionEvent e) -> {
            process();
        });

        searchBar.addKeyListener(new KeyListener() {
            @Override
            public void keyPressed(KeyEvent e) {

            }

            @Override
            public void keyTyped(KeyEvent e) {
            }

            @Override
            public void keyReleased(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    process();
                }
            }
        });
        javax.swing.GroupLayout layoutSearchingBox = new javax.swing.GroupLayout(searchingBox.getContentPane());
        searchingBox.getContentPane().setLayout(layoutSearchingBox);
        layoutSearchingBox.setHorizontalGroup(
                layoutSearchingBox.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layoutSearchingBox.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layoutSearchingBox.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(searchBar, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(40, Short.MAX_VALUE))
        );
        layoutSearchingBox.setVerticalGroup(
                layoutSearchingBox.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layoutSearchingBox.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(36, 36, 36)
                                .addGroup(layoutSearchingBox.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(searchBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(okButton))
                                .addContainerGap(70, Short.MAX_VALUE))
        );
        searchingBox.setVisible(true);
//        setLocationRelativeTo(null);
    }

    private void process() {
        if (choose == 0) {
            JOptionPane.showMessageDialog(null, "Bạn chưa chọn thuộc tính tìm kiếm!");
            return;
        } else if (searchBar.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Bạn hãy nhập vào ô tìm kiếm!");
            return;
        }
        deleteAllRows();
        ConnectDB connectDB = new ConnectDB();
        Connection connection = connectDB.getConnect();
        String text = searchBar.getText().trim().replaceAll("\\s+", " ");
        DefaultTableModel tableModel = (DefaultTableModel) employeeTable.getModel();
        switch (choose) {
            case 1:
                String sql = "SELECT * FROM qltv.infor_book WHERE (idBook = '" + text + "')";
                System.out.println(sql);
                try {
                    Statement st = connection.createStatement();
                    ResultSet rs = st.executeQuery(sql);
                    while (rs.next()) {
                        tableModel.addRow(new Object[]{rs.getString(1), rs.getString(2),
                            rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7)
                        });
                    }
                    employeeTable.setModel(tableModel);
                    warning(employeeTable.getRowCount());
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Thất bại!\n" + "Lỗi: " + ex.getMessage());
                }
                break;
            case 2:
                String sql2 = "SELECT * FROM qltv.infor_book WHERE (Book_name = '" + text + "')";
                System.out.println(sql2);
                try {
                    Statement st = connection.createStatement();
                    ResultSet rs = st.executeQuery(sql2);
                    while (rs.next()) {
                        tableModel.addRow(new Object[]{rs.getString(1), rs.getString(2),
                            rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7)
                        });
                    }
                    employeeTable.setModel(tableModel);
                    warning(employeeTable.getRowCount());
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Thất bại!\n" + "Lỗi: " + ex.getMessage());
                }
                break;
            case 3:
                String sql3 = "SELECT * FROM qltv.infor_book WHERE (Author = '" + text + "')";
                System.out.println(sql3);
                try {
                    Statement st = connection.createStatement();
                    ResultSet rs = st.executeQuery(sql3);
                    while (rs.next()) {
                        tableModel.addRow(new Object[]{rs.getString(1), rs.getString(2),
                            rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7)
                        });
                    }
                    employeeTable.setModel(tableModel);
                    warning(employeeTable.getRowCount());
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Thất bại!\n" + "Lỗi: " + ex.getMessage());
                }
                break;
            case 4:
                String sql4 = "SELECT * FROM qltv.infor_book WHERE (Publisher = '" + text + "')";
                System.out.println(sql4);
                try {
                    Statement st = connection.createStatement();
                    ResultSet rs = st.executeQuery(sql4);
                    while (rs.next()) {
                        tableModel.addRow(new Object[]{rs.getString(1), rs.getString(2),
                            rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7)
                        });
                    }
                    employeeTable.setModel(tableModel);
                    warning(employeeTable.getRowCount());
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Thất bại!\n" + "Lỗi: " + ex.getMessage());
                }
                break;
            case 5:
                boolean[] flag = new boolean[1000];
                for (int i = 0; i < flag.length; i++) {
                    flag[i] = false;
                }
                String[] strings = text.split(",");
                for (String string : strings) {
                    string = string.trim();
                    String sql5 = "SELECT * FROM qltv.infor_book WHERE Kind LIKE '%" + string + "%'";
                    System.out.println(sql5);
                    try {
                        Statement st = connection.createStatement();
                        ResultSet rs = st.executeQuery(sql5);
                        while (rs.next()) {
                            int num = Integer.parseInt(rs.getString(1).replaceAll("\\D+", ""));
                            if (flag[num]) {
                                continue;
                            }
                            tableModel.addRow(new Object[]{rs.getString(1), rs.getString(2),
                                rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7)
                            });
                            flag[num] = true;
                        }
                        employeeTable.setModel(tableModel);
                        warning(employeeTable.getRowCount());
                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(null, "Thất bại!\n" + "Lỗi: " + ex.getMessage());
                    }
                }
                break;
            case 6:
                String sql6 = "SELECT * FROM qltv.infor_book WHERE (Cost = '" + text + "')";
                System.out.println(sql6);
                try {
                    Statement st = connection.createStatement();
                    ResultSet rs = st.executeQuery(sql6);
                    while (rs.next()) {
                        tableModel.addRow(new Object[]{rs.getString(1), rs.getString(2),
                            rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7)
                        });
                    }
                    employeeTable.setModel(tableModel);
                    warning(employeeTable.getRowCount());
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Thất bại!\n" + "Lỗi: " + ex.getMessage());
                }
                break;
            default:
                String sql7 = "SELECT * FROM qltv.infor_book WHERE (Number_books = '" + text + "')";
                System.out.println(sql7);
                try {
                    Statement st = connection.createStatement();
                    ResultSet rs = st.executeQuery(sql7);
                    while (rs.next()) {
                        tableModel.addRow(new Object[]{rs.getString(1), rs.getString(2),
                            rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7)
                        });
                    }
                    employeeTable.setModel(tableModel);
                    warning(employeeTable.getRowCount());
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Thất bại!\n" + "Lỗi: " + ex.getMessage());
                }
                break;
        }
    }

    private void warning(int flag) {
        if (flag == 0) {
            JOptionPane.showMessageDialog(null, "Không có kết quả phù hợp!");
        }
    }
}
